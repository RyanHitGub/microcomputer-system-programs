from gpio import *
from time import *

timeUnit = 200
morseCode = [["A", ".-"],
			 ["B", "-..."],
			 ["C", "-.-."],
			 ["D", "-.."],
			 ["E", "."],
			 ["F", "..-."],
			 ["G", "--."],
			 ["H", "...."],
			 ["I", ".."],
			 ["J", ".---"],
			 ["K", "-.-"],
			 ["L", ".-.."],
			 ["M", "--"],
			 ["N", "-."],
			 ["O", "---"],
			 ["P", ".--."],
			 ["Q", "--.-"],
			 ["R", ".-."],
			 ["S", "..."],
			 ["T", "-"],
			 ["U", "..-"],
			 ["V", "...-"],
			 ["W", ".--"],
			 ["X", "-..-"],
			 ["Y", "-.--"],
			 ["Z", "--.."],
			 ["1", ".----"],
			 ["2", "..---"],
			 ["3", "...--"],
			 ["4", "....-"],
			 ["5", "....."],
			 ["6", "-...."],
			 ["7", "--..."],
			 ["8", "---.."],
			 ["9", "----."],
			 ["0", "-----"]]
			 
message = "Ryan Smith"
messageToMorse = message.upper()

def main():
	#button/rocker switch
	pinMode(0, IN)
	#LED
	pinMode(1, OUT)
	#LCD
	pinMode(2, OUT)


	while True:
		digitalWrite(1, LOW)
		customWrite(2, "")
		delay(1000)
		
		#rocker switch on
		if digitalRead(0, HIGH):
			#loop through each character of message
			for character in messageToMorse:
				if character != " ":
					#loop through morse code dictionary
					for morse in morseCode:
						#match character to morse code and get dots/dashes
						if character == morse[0]:
							customWrite(2, character + "\n" + morse[1])
							dotsAndDashes = morse[1]
							#loop through dots/dashes
							for signal in dotsAndDashes:
								if signal == ".":
									Dot()
								else:
									Dash()
								SpaceInternal()
				#character is space
				else:
					SpaceWords()
		#rocker switch off
		else:
			digitalWrite(1, LOW)
			customWrite(2, "")
						
#keep LED on for a DOT time period
def Dot():
	digitalWrite(1, HIGH)
	delay(timeUnit)
	digitalWrite(1, LOW)
	
#keep LED on for a DASH time period
def Dash():
	digitalWrite(1, HIGH)
	delay(timeUnit * 3)
	digitalWrite(1, LOW)
	
#space between the dots and dashes of the same letter
def SpaceInternal():
	delay(timeUnit)
	
#space between the letters of same word
def SpaceLetters():
	delay(timeUnit * 3)

#space between words
def SpaceWords():
	delay(timeUnit * 7)

if __name__ == "__main__":
	main()
